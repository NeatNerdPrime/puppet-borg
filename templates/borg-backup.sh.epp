<%- | Boolean $manage_prune,
      Integer[0] $keep_yearly,
      Integer[0] $keep_monthly,
      Integer[0] $keep_weekly,
      Integer[0] $keep_daily,
      Integer[0] $keep_within,
      String[1] $compression,
      String[1] $backupdestdir,
      Array[String[1]] $exclude_pattern,
| -%>
#!/bin/bash
#
# THIS FILE IS MANAGED BY PUPPET
#
# This is a simple backup script using borg. It's supposed to serve as a
# starting point and to be adjusted to your system.
#
# Important steps:
#  - define a host "backup" in root's .ssh/config
#  - You can override variables from main() as well as the pre_backup() and post_backup() functions in
#    $XDG_CONFIG_HOME/backup-sh-conf.sh or /etc/backup-sh-conf.sh
#  - As root run `BORG_PASSPHRASE='' borg init -v --encryption=keyfile backup:<%= $backupdestdir %>`
#    (note that zsh uses $HOST instead of $HOSTNAME)
#  - If you want, increase the max_segment_size in
#    ssh://backup/borg-$HOSTNAME/config from the default 5MiB
#
# Copyright Â©2014-2017 Florian Pritz <bluewind@xinu.at>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# See gpl-3.0.txt for full license text.

##
# Originally written by Florian Pritz
# based on https://git.server-speed.net/users/flo/bin/tree/backup.sh
##
# modified by Tim 'bastelfreak' Meusel
##

set -e

# set PATH by hand so we ensure that the puppetlabs stuff is present
PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/opt/puppetlabs/bin:/bin:/sbin"

main() {
  if [[ $UID != 0 ]]; then
    exec sudo "$0" "$@"
  fi

  TMPDIR="$(mktemp -d "/tmp/${0##*/}.XXXXXX")"
  trap "rm -rf '${TMPDIR}'" EXIT TERM

  # The backup repository used by borg
  borg_repo="backup:<%= $backupdestdir %>"

  # These mountpoints will be excluded. Mountpoints not listed in either this
  # or the includeMountpoints variable below will throw an error
  excludeMountpoints=(
    /tmp
    /sys
    /dev
    /proc
    /run
    /media
  )

  # These mountpoints will be included
  includeMountpoints=(
    /
    /boot
    /home
    /mnt/data
  )

  # List of patterns that should be excluded. This supports shell globbing as
  # well as regex pattern. Refer to man borg for details.
  IFS='' read -r -d '' excludeList <<-EOF || true
<% $borg::exclude_pattern.each |$key| { -%>
  <%= $key %>
<% } -%>
EOF

  for configfile in "${XDG_CONFIG_HOME:-$HOME/.config}/backup-sh-conf.sh" /etc/backup-sh-conf.sh; do
    if [[ -e "$configfile" ]]; then
      source "$configfile"
    fi
  done

  exclude_mountpoints
  echo "$excludeList" > "$TMPDIR/exclude-list-borg"

  run_if_exists pre_backup
  backup_borg / "$borg_repo"
  run_if_exists post_backup
}

# This is called before creating the backup
pre_backup() {
  # save some data that's useful for restores
  local backupDataDir=/root/backup-data/
  mkdir -p "$backupDataDir"
  if [ $(command -v fdisk) ]; then
    fdisk -l > "$backupDataDir/fdisk"
  fi
  if [ $(command -v vgdisplay) ]; then
    vgdisplay > "$backupDataDir/vgdisplay"
  fi
  if [ $(command -v pvdisplay) ]; then
    pvdisplay > "$backupDataDir/pvdisplay"
  fi
  if [ $(command -v lvdisplay) ]; then
    lvdisplay > "$backupDataDir/lvdisplay"
  fi
  if [ $(command -v df) ]; then
    df -a > "$backupDataDir/df"
  fi
  if [ $(command -v findmnt) ]; then
    findmnt -l > "$backupDataDir/findmnt"
  fi
  if [ $(command -v mdadm) ]; then
    mdadm --detail --scan > "$backupDataDir/mdadm"
  fi
  if [ $(command -v vgcfgbackup) ]; then
    vgcfgbackup --file "$backupDataDir/vgcfgbackup_%s"
  fi

  # If you wish to use snapshots, create them here

  return
}

# This is called after backup creation
post_backup() {
  # If you need to perform any cleanup do so here

  return
}

backup_borg() {
  local src=$1
  local dst=$2
  local -a options=(
    --verbose
    --numeric-owner
    --compression "<%= $compression %>"
    --exclude-from "$TMPDIR/exclude-list-borg"
    )

  if tty -s; then
    options+=(--progress)
  fi

  borg create "${options[@]}" --stats --verbose "$dst::backup-$(date "+%Y%m%d-%H%M%S")" "$src"
<% if $manage_prune { -%>
  # keep all backups from the last <%= $keep_within %> days
  # keep at least one backup for each day for <%= $keep_daily %> days
  # keep at least one backup for each week for <%= $keep_weekly %> weeks
  # keep at least one backup for each month for <%= $keep_monthly %> months
  # keep at least one backup for each year for <%= $keep_yearly %> years
  # more details at https://borgbackup.readthedocs.io/en/stable/usage/prune.html
  borg prune --stats --verbose --keep-within <%= $keep_within %>d --keep-daily <%= $keep_daily %> --keep-weekly <%= $keep_weekly %> --keep-monthly <%= $keep_monthly %> --keep-yearly <%= $keep_yearly %> "$dst"
<% } -%>
}

### support functions below ###

run_if_exists() {
  if declare -F $1 &> /dev/null; then
    $1 "${@:2}"
  fi
}

##
#  usage : in_array( $needle, $haystack )
# return : 0 - found
#          1 - not found
##
in_array() {
    local needle=$1; shift
    local item
    for item in "$@"; do
        [[ $item = "$needle" ]] && return 0 # Found
    done
    return 1 # Not Found
}

# same as in_array except 0 is returned if any item in haystack starts with needle
in_array_startswith() {
    local needle=$1; shift
    local item
    for item in "$@"; do
        [[ "$needle" == "$item"* ]] && return 0 # Found
    done
    return 1 # Not Found
}

exclude_mountpoints() {
  local error=0

  for fs in "${excludeMountpoints[@]}"; do
    excludeList+="sh:$fs/*"$'\n'
  done

  while read line; do
    local mountpoint=$(echo "$line" | cut -d\  -f2 | sed 's#\040# #g;')

    if ! in_array "$mountpoint" "${includeMountpoints[@]}"; then
      if ! in_array_startswith "$mountpoint/" "${excludeMountpoints[@]/%//}"; then
        error=1
        echo "Warning: mountpoint not excluded or included: $mountpoint" >&2
      fi
    fi
  done </etc/mtab

  if ((error)); then
    exit 1
  fi
}

main "$@"
